Format and structure:
- Format this exam task as a valid HTML string for use in a JavaScript variable.
- Use <p>...</p> for all text paragraphs.
- Use <h3>a)</h3>, <h3>b)</h3>, etc. for subtask labels if applicable.
- Do not explain, summarize, or add anything outside the HTML.
- Output must be usable directly in const oppgaveTekst = `<the content here>`.
- Do not add any other text or explanation.
- Do not add any HTML tags except <p>...</p> and <h3>...</h3>.
- Be sure to include spaces and line breaks where appropriate—the formatting should look clean and readable.
- Change wording such as "See the figure below." to "See the figure above." since images always come before the task text.

DO NOT DO NOT DO NOT write "```html" and "```" or "const oppgaveTekst=`" and "`;" or similar around the text, since your response is processed as a string by JavaScript and inserted directly into HTML.
DO NOT DO NOT DO NOT write "```html" and "```" or "const oppgaveTekst=`" and "`;" or similar around the text, since your response is processed as a string by JavaScript and inserted directly into HTML.
DO NOT DO NOT DO NOT write "```html" and "```" or "const oppgaveTekst=`" and "`;" or similar around the text, since your response is processed as a string by JavaScript and inserted directly into HTML.

Mathematical content:
- Use LaTeX compatible with MathJax.
- Use $$...$$ for display math.
- Use $...$ for inline math. Use inline math for ALL numbers or symbols inline.
- Use a single backslash for LaTeX commands (e.g., \frac, \sqrt).
- Do not use \( ... \) or \[ ... \].
- Do not double-escape backslashes.
- Make sure that e.g. infty, omega, theta, etc. are properly formatted as their respective symbols.

Code and programming:
- If the task text contains code, preserve it exactly inside <pre class="code-box"><code>...</code></pre>.
- If the code contains multiple-choice logic, write e.g. "X = ?" or "return ?" directly in the code. Then list each alternative in a separate code box.
- If the code is a single line (e.g., in multiple-choice), wrap that line in <pre class="code-box"><code>...</code></pre> as well—do not show it as plain text.
- If the code contains mathematical expressions (e.g., f(x), $f(x + h)$, etc.), do not try to blend it into the code. Instead:
  - Place code inside <pre class="code-box"><code>...</code></pre>
  - Place math inside <div class="math">...</div> using MathJax-compatible LaTeX (e.g., inline $f(x)$ or block $$f(x + h) - f(x)$$)
- If the task has subquestions (e.g., a), b), c)) and each contains code or math, format each as:
  <h3>a)</h3>
  <pre class="code-box"><code>...</code></pre>
  <div class="math">...</div> (if applicable)
- Preserve all syntax and line breaks exactly as they appear in the original text. Remember that Python is extremely indentation-sensitive, so format accordingly.

Multiple choice:
- For multiple-choice questions with text or image options, also follow these rules:
  - Present the options as an ordered list using <ol><li>.
  - Prefix each option with the corresponding letter label inside <b> tags (A, B, C, ...).
  - The task statement itself should be outside the list in a regular <p> tag.
  - If the choices are lines of code, format them according to the code formatting instructions above.

Tasks requiring calculation, proof, or explanation:
- For regular tasks that require proving, calculating, or explaining, also follow these rules:
  - Keep paragraphs short and use multiple <p> elements rather than a single long block. MAKE MANY PARAGRAPHS — DO NOT GIVE ME ONE GIANT TEXT BLOCK.
  - Introduce each subtask with the label <h3>a)</h3>, <h3>b)</h3>, and so on.

OCR errors and interpretation:
- You are allowed to make certain assumptions about OCR artifacts in the text, such as interpreting \sqrt{\sqrt{\sqrt as a likely error for a single square root.
