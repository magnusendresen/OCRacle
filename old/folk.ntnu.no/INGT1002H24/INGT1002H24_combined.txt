--- Page 1 ---
* Forside
Eksamensoppgave i: INGA1002/INGG1002/INGT 1002 Programmering og numerikk
Dato: 16.12.2024
Tid: kl 09:00 - 12:00
Faglig kontakt under eksamen:
Trondheim INGT1002
Programmering: Majid Rouhani
Numerikk: Markus Arthur Kobis
Gjovik INGG1002
Programmering: Jon Yngve Hardeberg
Numerikk: Charles Curry
Alesund INGA1002
Programmering: Kai Erik Hoff
Numerikk: Truls Helge @i
Moter i eksamenslokalet: NEI
Hjelpemiddelkode/Tillatte hjelpemidler: D - Ingen trykte eller handskrevne hjelpemidler tillatt.
Bestemt, enkel kalkulator tillatt.
ANNEN INFORMASJON:
Les oppgavene noye og gjor dine egne antagelser. Presiser i besvarelsen hvilke forutsetninger
du har lagt til grunn i tolkning/avgrensing av oppgaven. Dette gjelder ikke-flervalgsoppgaver.
Faglig kontaktperson skal kun kontaktes dersom det er direkte feil eller mangler i
oppgavesettet. Henvend deg til en eksamensvakt hvis du mistenker feil og mangler. Noter
sporsmalet ditt pa forhand.
FAGSPESIFIKK INFORMASJON
Ingen handtegninger:
Denne eksamenen tillater ikke bruk av handtegninger. Har du likevel fatt utdelt skanne-ark, er
dette en feil. Arkene vil ikke bli akseptert for innlevering, og de vil derfor heller ikke sendes
til sensur.
Vekting av oppgavene: Oppgavesettet er delt inn i 3 seksjoner (programmering, numerikk, og
felles oppgaver). Programmering (1-6) og numerikk (7-12) oppgavene teller 33% hver, mens siste
delen (13-17) teller 34%.
Varslinger: Hvis det oppstar behov for a gi beskjeder til kandidatene underveis i eksamen (f.eks.
ved feil i oppgavesettet), vil dette bli gjort via varslinger i Inspera. Et varsel vil dukke opp som en
dialogboks pa skjermen. Du kan finne igjen varselet ved a klikke pa bjella averst til hoyre.


--- Page 2 ---
Trekk fra/avbrutt eksamen: Blir du syk under eksamen, eller av andre grunner @nsker a levere
blankt/avbryte eksamen, ga til “hamburgermenyen” i @vre hayre hjorne og velg «Lever blankt».
Dette kan ikke angres selv om proven fremdeles er apen.
Tilgang til besvarelse: Etter eksamen finner du besvarelsen din i arkivet i Inspera. Merk at det
kan ta én virkedag for eventuelle handtegninger vil vere tilgjengelige i arkivet.
1 Matematiske operasjoner
Gitt variabeldefinisjonen
c=7
Hva blir verdien til c etter at vi utforer folgende operasjoner?
c=c"*2
c%=5
Velg ett alternativ:
2
40
3
4
Gitt variabeldefinisjonen
z=8
Hva blir verdien til z etter at vi utforer folgende operasjoner?
z+=10
z/=3
Velg ett alternativ
9
3
6.0
6
Maks poeng: 4


--- Page 3 ---
2 Funksjoner
Denne koden definerer en funksjon is_prime(n) som sjekker om et gitt tall n er et primtall.
Test av funksjonen gir disse resultatene:
is_prime(10) # returnerer False
is_prime(11) # returnerer True
is_prime(1) # returnerer False
is_prime(13) # returnerer True
Lag funksjonen is_prime ved a plassere kodefragment i rett rekkefalge. Noen av fragmentene
skal IKKE brukes.
Pass pa a plassere draomradene slik at de "snapper" til ansket rute. Se bort fra innrykk
def is_prime(n):
ifn <= 1:
return False
for j in range(2, n):

ifn % j ==0:

return False

return True

from math import sqrt
ifn //j == 0:
Maks poeng: 7


--- Page 4 ---
3 Sammenligningsoperatorer
Gitt folgende kode:
a=5
b=5.0
c="5"
d = True
e = False
Nedenfor star en rekke uttrykk. For hvert uttrykk, kryss av for True hvis uttrykket er sant, eller
False hvis det er usant, eller kryss av for Error hvis uttrykket vil gi syntaksfeil.
Finn de som passer sammen:
False True Error
b>a
a>=b
d==1
al=c
e<=0
a==b
d<e
Maks poeng: 7


--- Page 5 ---
4 Lister og indekser
Gitt folgende programkode:
temperatures = [15.5, 17.2, 16.8, 14.9, 18.3, 19.0, 16.5]
def f1(temps):
return sum(temps) / len(temps)
def f2(temps):
return sum(temps[:3]) / len(temps[:3])
def f3(temps):
return sum(temps[-4:]) / len(temps[-4:])
def f4(temps):
return max(temps)
def f5(temps):
return temps[::-1]
def f6(temps):
result = []
for temp in temps:
if temp > 17:
result.append(temp)
return result
Hver rad nedenfor har et kall til funksjonene ovenfor. Skriv i tekstfeltet hva svaret blir. Flyttall
avrundes til en desimal.
print(f"{f1(temperatures):.1f}") skriver ut fs
print(f"{f2(temperatures):.1f}") skriver wo
print(f"{f3(temperatures):.1f}") skriver ut fF
print(f"{f4(temperatures):.1f}") skriver ut f
print(f"{f5(temperatures)}") skriver ut [
print(f"{f6(temperatures)}") skriver ut fs]


--- Page 6 ---
Maks poeng: 6
5 Numpy og matriser
Skriv ferdig funksjonen get_diagonal (velg kode fra nedtrekksmeny) som tar inn en matrise A, og
returnerer en ny matrise A_diag der det kun er diagonalelementene fra A som er med (resten av
matriseelementene er lik 0).
For eksempel, dersom input til funksjonen er matrisen A nedenfor, sa skal output vzere matrisen
D.
Et matriseelement ligger langs diagonalen dersom i = j. Eksempel:
10 2 4 9 10 0 0 0
3 5 15 8 0 5 0 O
A= ,| ~D=
1 7 6 3 0 0 6 #0
17 O 17 #10 0 0 O 10
import numpy as np
def get_diagonal(A):
rows, cols = np.shape(A)
A_diag = np.zeros([rows, cols])
for i in range(rows):
for j in range(cols):
if ==]:
Velg alternativ (A_diag[i, j] = Ali, j], A_diag[i, j] = A[rows, cols], A_diagl[j, j] = A_diag[i,
i], Afi, j] = A_dialg[i, j])
return A_diag
Maks poeng: 4


--- Page 7 ---
8 Analyse av listedata
Lag en funksjon bmi_statistikk som kan ta inn en liste med persondata (hoyde og vekt), og
returnerer andelen av personene som har en kroppsmasseindeks (BMI) som er over en viss
terskel i prosent.
Formel for utregning av BMI (hoyde er gitt i meter):
BMI = vekt
hoyde?
Eksempel pa data:
bmi_data= [[180, 90],
(195, 92],
(165, 66]]
terskel = 25
| tabellen representerer hver rad en person, der forste kolonne er hayde malt i centimeter (cm) og
andre kolonne er vekt malt i Kg.
Eksempel pa funksjonskall (gitt at variabelen bmi_data og terskel er definert som ovenfor):
andel = bmi_statistikk(bmi_data, terskel)
print(f*"Andel av personene med BMI over {terskel}: {andel:.2f}%")
Skriver ut: Andel av personene med BMI over 25: 33.33%
Skriv ditt svar her
1


--- Page 8 ---
Maks poeng: 5
7 Numerisk derivasjon
Vi maler folgende verdier for hayden til en drone:
h= (153, 155, 158, 163, 170, 178, 185, 189, 188, 183]
Malingene er gjort ved folgende tidspunkt:
t= (0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
Vi ser bort fra enhetene til h og t.
Vi antar at dronen kun beveger seg i hayderetningen. Hva gir forroverdifferanse som en
tilnzerming til den tidsderiverte av hayden?
Vforover (1.0) = [|
Hva gir bakoverdifferanse?
Ubakover (1.0) |]
Hva gir sentraldifferanse?
Usentral (1.0) ||
Maks poeng: 6


--- Page 9 ---
8 Hvilken metode?
Finn hvilken numerisk metode som kan brukes til a lose hvilken oppgave.
Hvert svaralternativ passer til noyaktig en oppgave.
A: Vi har malt hastigheten v(t) og startposisjonen s(tstart) til en drone, og er interesserte i a vite
posisjonen. Det vil si: Vi kjenner v(t) = a for tiden ¢ i [tstart, tslutt], 09 vil finne s(t) for ti
samme tidsrommet [tstart, Estutt]-
B: Vi har malt posisjonen til en drone, og er interesserte i a finne hastigheten. Det vil si: Vi kjenner
s(t) for tiden i [tstart, tslutt}, 0g vil finne v(t) = & for tidsrommet (start, tsiutt )-
C: En drone mister motorkraften, og faller fritt. Vi vet at dv = 9- aa Vi er interesserte i a finne
v(t). (g, k og m er konstante tall vi vet.)
D: Vi er gitt at en drone har folgende hoyde malt fra hustaket ved tiden t:
h(t) =e* - 0.001t?. Vi er interesserte i ved hvilket tidspunkt hayden blir null, altsa for hvilket
tidpunkt ¢ man far h(t) = 0.
Finn de som passer sammen:
Cc A D B

Newtons metode

Foroverdifferanse

Simpsons metode eller Eulers metode

Vi har ikke nok informasjon

Maks poeng: 4


--- Page 10 ---
9 Newtons metode
Bruk to iterasjoner av Newtons metode til a lose ligningen
sin(z) + x = 2.0
Det kan veere nyttig at 4 (sin(z)) = cos(z).
Bruk startgjetning xp = 0.5
Ett steg av Newtons metode gir :
To steg av Newtons metode gir:
Maks poeng: 6
10 Differensialligning
En sten faller med hastigheten v(t), der u(t) folger differensialligningen:
dv
GT =97 kv?
Vi ser bort fra enheter og gar ut fra g = 9.81 0g k = 0.15. Ved t = 0.0 er hastigheten 3.0 det
vil si v(0.0) = 3.0. | numerikkurset har dere lzert en metode for a lose differensialligninger
numerisk. Denne metoden star pa formelarket. Bruk ett eller flere steg i denne metoden til a
beregne en tilnzerming for hastigheten ett tidels sekund senere. Det vi si, finn en tilnaerming til
v(0.1).
v(0.1) = [|
Maks poeng: 5


--- Page 11 ---
11 Konvergensrate
Feil som funksjon av steglengde
10?
E€
10°
107?
107? 10°
h
Over ser dere et logaritmisk plot av feilen € som en funksjon av steglengden h for en numerisk
metode. Vi ser at « = k- h*, der k og aer konstanter. Det er oppgitt at a er et heltall.
Dere skal bestemme a ut fra grafen.
Dersom vi bruker steglengde h = 0.09 far vi feilen € = 0.09. Hvilken steglengde h ma vi velge
for at feilen skal blie = 0.01?
r=L
Maks poeng: 5


--- Page 12 ---
12 Integrasjon
Vi ser pa funksjonen:
g(x) = sin(x)
Bruk Trapesmetoden med to delintervaller (tre punkter) til a finne en tilnzerming til
I= fy g(x) de.
Bruk sa Simpsons metode med to delintervaller (tre punkter) til a tilnaerme J. Hva er awviket fra
eksakt verdi? (Eksakt verdi er 2.) Hvilken metode er den mest noyaktige?
Vi ser sa pa
h(x) = 123.452? — 4.345262 + 325
Dersom du skal beregne Sc h(x) dx med tre punkter, vil trapesmetoden eller Simpsons metode
gi minst feil? Trenger du a regne ut integralet for 4 svare pa sporsmalet? Begrunn svaret.
Skriv ditt svar her
Maks poeng: 7


--- Page 13 ---
13 Numerisk derivasjon

Gitt en matematisk funksjon

f(z) = (x + 3.5)3 + 2-27 — 10
Fullfor programmet nedenfor slik at det regner ut en tilnaerming til funksjonens deriverte for
intervallet
x = Ot.o.m x = 4 med bruk av senterdifferanse med skrittlengde h = 0.02, og plotter f’(z)
som funksjon av zi intervallet0 <2 < 4.

import numpy as np

import matplotlib.pyplot as plt

def f(x):

Velg alternativ ((x + 3.5)**3 + 2*x**2 - 10, y = (x + 3.5)"*3 + 2*x**2 -
10, f(x) = (x + 3.5)**3 + 2*x**2 - 10, y_der = (x + 3.5)**3 + 2*x**2 - 10)
return y

h=0.02

x= Velg alternativ (np.linspace(0, 4 + h, h), np.arange(0, 4, h),

np.linspace(0, 4, h), np.arange(0, 4 + h, h))

f_der=  Velgalternativ ((f(x+h)-f(x))/h*2, f(x+h) - f(x-h)/(h+h), (f(x+h)-F(x-

h))/2*h, (f(x+h)-f(x-h))/(2*h))

Velg alternativ (plt.plot(f_der), plt.plot(f_der, x), plt.plot(f, f_der),
plt.plot(x, f_der))
Maks poeng: 6


--- Page 14 ---
14 Numerisk Integrasjon med Trapesmetoden
Fullfor koden nedenfor slik at den bruker trapesmetoden til a beregne integralet av:
f(x) =?
fra 0 til 1 med n = 10 delintervall.
import numpy as np
def f(x):
Velg alternativ (y = 2*x, y = x**2, y = 2*x"*2, y = f(x))

return y
a=0
b=1
n=10
h=(b-a)/n
x=  Velg alternativ (linspace(n+h/2, n-h/2), linspace(a, b, n),
np.linspace(a + h/2, b - h/2), np.linspace(a, b, n + 1))
y = f(x)
integral =| Velg alternativ ((h/ 2) * (y[0] + sum(y(1:-1]) + y[-1]),
sum(y[(1:-1]), (A / 2) * (y[0] + 2 * sum(y[1:-1]), (Wh / 2) * (y[0] + 2 *
sum(y[1:-1]) + y[-1]))

Maks poeng: 6


--- Page 15 ---
1S Eulers metode

Fullfor koden nedenfor slik at den bruker Eulers metode til a lose differensialligningen

Y=y-241

med initialverdien y(0) = 0.5 og skrittlengde h = 0.5 for x fra O til 1.

import numpy as np

def f(x, y):

Velg alternativ (return y' + x**2 - 1, return y - x*2 + 1, return y - x**2 +

1,y-x**2 +1)

h=0.5

x=  Velg alternativ (np.arange(0, 1 +h, h), np.arange(h, 1 +h, h),

arange(0, 1 + h, h), np.arange(0, 1, h))

y = np.zeros(len(x))

y(0] = 0.5

for i in range(1, len(x)):

y[i] =| Velg alternativ (h * f(x{i-1], y[i-1]) - yfi-1], y[i+1] + h * f(x{i-1],
yli+1]), yli-t] + fOxfi-4], y[i-1])/h, yfi-t] +h * fOxfi-1], yli-1]))
Maks poeng: 7.5


--- Page 16 ---
16 Fikspunktiterasjon

Gitt ligningen
(4-2)? =4
Fullfor programkoden nedenfor slik at den bruker fikspunktiterasjon med initialverdi zy = Otil a
finne en losning til ligningen med maksimalt avvik pa 10-°.
def g(x):

return, Velg alternativ ((x**2+12)/8, (x**2+12), (x**2+8)/12, (x**2+16))
x=0
while Velg alternativ (abs(g(x)) > 1e-6, abs(g(x)-x) > 1e-6, abs(x) < 1e-6, abs(g(x)-x) < 1e-
6):

Velg alternativ (x = g(x), x = x - g(x)/g_deriv(x), x += g(x), x += 1e-6)
print(f"Tilnzermet losning funnet: x = {x}")
Maks poeng: 7.5


--- Page 17 ---
17 Absolutt og relativ feil

| numerikk bruker vi ofte absolutt feil og relativ feil til a evaluere noyaktigheten til en numerisk
beregning. Gitt en eksakt tallverdi y og en tilnzermet tallverdi x, vil den matematiske definisjonen
pa absolutt og relativ feil vaere:
absolutt feil = |x — y|
relativ feil = |=
Funksjonen nedenfor har som oppgave a sjekke om to tall x og y er tilnzermet like gitt en
absolutt toleranse atol og relativ toleranse rtol. Funksjonen skal returnere True dersom
absolutt feil < atol eller dersom relativ feil < rtol, og returnere False for alle andre
tilfeller.
Fullfor koden til funksjonen is_approx_equal slik at den fungerer som beskrevet over, samtidig
som den unngar "ulovlige" matematiske regneoperasjoner (dvs. regneoperasjoner som gir
feilmelding i Python).
def is_approx_equal(x, y, rtol, atol):

if Velg alternativ (abs(x - y) <= max(atol, abs(y)*rtol), abs((x - y)/y) <= rtol and abs(x -
y) <= atol, [(x - y)/y] >= rtol and [x - y] >= atol, abs(x - y) <= min(atol, abs(y)*rtol)):

return True
else:
return False
Maks poeng: 7


--- z:\INGT1002H24\INGT1002H24_extracted_1.png ---
temperatures = [15.5, 17.2, 16.8, 14.9, 18.3, 19.0, 16.5]
def fi(temps):

return sum(temps) / len(temps)
def f2(temps):

return sum(temps[:3]) / len(temps[:3))
def f3(temps):

return sum(temps[-4:]) / len(temps[-4:])
def f4(temps):

return max(temps)
def f5(temps):

return temps[::-1]
def f6é(temps):

result = []

for temp in temps:

if temp > 17:
result .append(temp)
return result


--- z:\INGT1002H24\INGT1002H24_extracted_2.png ---
_Feil som funksjon av steglengde
wo
A


