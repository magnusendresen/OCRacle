import os
import logging
from tkinter import Tk, filedialog
from pdf2image import convert_from_path
from PIL import Image
import pytesseract
import fitz  # PyMuPDF

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def pdf_to_combined_text(pdf_path, output_dir):
    try:
        # Open the PDF
        doc = fitz.open(pdf_path)
        logging.info(f"Opened PDF file: {pdf_path}")

        # Convert PDF pages to images
        page_images = convert_from_path(pdf_path)
        logging.info(f"Converted PDF to {len(page_images)} page images.")

        # Prepare output directory and file
        base_name = os.path.splitext(os.path.basename(pdf_path))[0]
        pdf_output_dir = os.path.join(output_dir, base_name)
        os.makedirs(pdf_output_dir, exist_ok=True)
        logging.info(f"Created output directory: {pdf_output_dir}")

        output_file_path = os.path.join(pdf_output_dir, f"{base_name}_combined.txt")

        with open(output_file_path, "w", encoding="utf-8") as output_file:
            # Process pages for OCR
            temp_page_image_paths = []  # Track page images for cleanup
            for i, page_image in enumerate(page_images):
                temp_page_path = os.path.join(pdf_output_dir, f"temp_page_{i + 1}.png")
                page_image.save(temp_page_path, "PNG")
                temp_page_image_paths.append(temp_page_path)

                logging.info(f"Processing OCR for page {i + 1}")
                text = pytesseract.image_to_string(page_image, lang='eng')
                output_file.write(f"--- Page {i + 1} ---\n")
                output_file.write(text)
                output_file.write("\n\n")

            # Process images within the PDF for OCR
            image_counter = 1
            for page_num in range(len(doc)):
                page = doc.load_page(page_num)
                for img_index, img in enumerate(page.get_images(full=True)):
                    xref = img[0]
                    base_image = doc.extract_image(xref)
                    image_bytes = base_image["image"]

                    # Skip small images
                    if len(image_bytes) < 2048:
                        logging.info(f"Skipped small image on page {page_num + 1}, image {img_index + 1} (size: {len(image_bytes)} bytes)")
                        continue

                    # Save extracted image permanently
                    image_filename = f"{base_name}_extracted_{image_counter}.png"
                    image_filepath = os.path.join(pdf_output_dir, image_filename)
                    with open(image_filepath, "wb") as img_file:
                        img_file.write(image_bytes)

                    # OCR on the image
                    logging.info(f"Processing OCR for extracted image {image_counter}")
                    image = Image.open(image_filepath)
                    ocr_text = pytesseract.image_to_string(image, lang='eng')

                    # Write OCR results to the output file
                    output_file.write(f"--- {image_filepath} ---\n")
                    output_file.write(ocr_text)
                    output_file.write("\n\n")

                    image_counter += 1

            # Clean up temporary page images
            for temp_image_path in temp_page_image_paths:
                os.remove(temp_image_path)
                logging.info(f"Deleted temporary page image: {temp_image_path}")

        logging.info(f"Combined OCR output saved to {output_file_path}")
    except Exception as e:
        logging.error(f"An error occurred: {e}")

if __name__ == "__main__":
    # Initialize Tkinter for file selection
    Tk().withdraw()
    pdf_path = filedialog.askopenfilename(filetypes=[("PDF files", "*.pdf")])
    if not pdf_path:
        logging.warning("No PDF file selected. Exiting.")
        exit()

    # Set output directory
    output_dir = os.path.dirname(os.path.abspath(__file__))

    # Process the PDF
    pdf_to_combined_text(pdf_path, output_dir)
    logging.info("Process completed successfully.")
